@model VirtualAdvocate.Models.ResetPasswordViewModel
@{
    //ViewBag.Title = "Reset password";
}

<h2>RESET PASSWORD</h2>

@using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal", id = "resetPasswordForm" }))
{
    @Html.AntiForgeryToken()
    <h4>Reset your password.</h4>
    <hr />

    <div class="alert-box success" style="display: none;">
        <span>success: </span><span class="successMessage">message</span>
    </div>
                    <div class="alert-box errorMsg" style="display: none;">
                        <span>error: </span><span class="errorMessage">message</span>
                    </div>

    @Html.ValidationSummary("", new { @class = "text-danger" })
    @Html.HiddenFor(m => m.EmailAddress)
    @Html.HiddenFor(m => m.CheckPoint)
    @*<div class="form-group">
        @Html.LabelFor(m => m.EmailAddress, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control" })
        </div>
    </div>*@
    <div class="form-group">
        @Html.LabelFor(m => m.NewPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="resetButton" class="btn btn-default" value="Reset" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
@*@Scripts.Render("~/bundles/jqueryui")*@
<script type="text/javascript">

        function ShowSuccess(message) {
            $(".successMessage").text(message);
            $(".success").delay(0).fadeIn("slow");
            $(".success").delay(3000).fadeOut("slow");
        }
        function ShowError(message) {
            $(".errorMessage").text(message);
            $(".errorMsg").delay(0).fadeIn("slow");
            $(".errorMsg").delay(3000).fadeOut("slow");
        }
        $(document).ajaxError(function (e, jqxhr, settings, exception) {
            if (jqxhr.readyState == 0 || jqxhr.status == 0) {
                alert("sddssd");
                return; //Skip this error
            }
        });

        $(document).ready(function () {
            $('#EmailAddress').focus();
            var resetButton = $("#resetButton");
            var resetPasswordForm = $("#resetPasswordForm");
            resetButton.click(function (e) {
                e.preventDefault();
                if (resetPasswordForm.valid()) {
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        url: "../UsersRegistration/ResetPassword",
                        data: JSON.stringify(resetPasswordForm.serializeObject()),
                        beforeSend: function () { resetButton.prop("disabled", true); resetButton.val("Processing...") }
                    })
        .success(function (data) {
            if (data.success) {
                ShowSuccess(data.message);
                setTimeout(function () {
                    window.location.href = '../Login/Index';
                }, 2002);

            }
            else
                ShowError(data.message);
            resetButton.prop("disabled", false);
            resetButton.val("Reset Password");

        })
        .error(function (xhr, status, error) {
            ShowError(error);
            resetButton.prop("disabled", false);
            resetButton.val("Reset Password");
        });
                    return false;
                }
            });

            jQuery.fn.serializeObject = function () {
                var arrayData, objectData;
                arrayData = this.serializeArray();
                objectData = {};

                $.each(arrayData, function () {
                    var value;

                    if (this.value != null) {
                        value = this.value;
                    } else {
                        value = '';
                    }

                    if (objectData[this.name] != null) {
                        if (!objectData[this.name].push) {
                            objectData[this.name] = [objectData[this.name]];
                        }

                        objectData[this.name].push(value);
                    } else {
                        objectData[this.name] = value;
                    }
                });

                return objectData;
            };

        });


</script>
}
