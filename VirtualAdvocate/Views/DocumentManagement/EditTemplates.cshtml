@model VirtualAdvocate.Models.EditDocumentUploadModel
@{
    ViewBag.MenuActive = "Templates";
    Layout = "~/Views/Shared/_Layoutmain.cshtml";
}

<h2>EDIT TEMPLATES</h2>
<link rel="stylesheet" href="~/Content/chosen.css">
@using (Html.BeginForm("EditTemplates", "DocumentManagement", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", onsubmit = "showProgress()" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12">
            <div class="well bs-component">
                <form class="form-horizontal">
                    <fieldset>
                        <legend>Edit Your Template</legend>
                        <div class="row">

                            @if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
                            {
                                <div class="alert alert-danger">
                                    <a href="#" class="close" data-dismiss="alert">×</a>
                                    <h4>Validation Errors</h4>
                                    @Html.ValidationSummary()
                                </div>
                            }
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="form-group">
                                    <label for="select" class="col-lg-2 control-label">Category</label>
                                    <div class="col-lg-4">
                                        @Html.HiddenFor(m => m.TemplateId)
                                        @Html.HiddenFor(m => m.TemplateName)
                                        @Html.DropDownListFor(m => m.DocumentCategoryId, new SelectList(Model.getAllCategory, "ID", "Name"), "-Select-", new { @class = "form-control", disabled = "disabled" })
                                        @Html.ValidationMessageFor(m => m.DocumentCategoryId, string.Empty, new { @class = "text-danger" })
                                    </div>
                                    <label for="select" class="col-lg-2 control-label">Sub Category</label>
                                    <div class="col-lg-4">
                                        @Html.DropDownListFor(m => m.DocumentSubCategoryId, new SelectList(Model.getAllSubCategory, "ID", "Name"), "-Select-", new { @class = "form-control", disabled = "disabled" })
                                        @Html.ValidationMessageFor(m => m.DocumentSubCategoryId, string.Empty, new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="form-group">
                                    <label for="select" class="col-lg-2 control-label">Sub Sub Category</label>
                                    <div class="col-lg-4">
                                        @Html.DropDownListFor(m => m.DocumentSubSubCategoryId, new SelectList(Model.getAllSubSubCategory, "ID", "Name"), "-Select-", new { @class = "form-control", disabled = "disabled" })
                                        @Html.ValidationMessageFor(m => m.DocumentSubSubCategoryId, string.Empty, new { @class = "text-danger" })
                                    </div>
                                    <label for="select" class="col-lg-2 control-label">Department</label>
                                    <div class="col-lg-4">
                                        @Html.DropDownListFor(m => m.DepartmentID, new SelectList(Model.getDepartmentlist, "ID", "Name"), "-Select-", new { @class = "form-control", disabled = "disabled" })
                                        @Html.ValidationMessageFor(m => m.DepartmentID, string.Empty, new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                        </div>
                        <hr class="bottom-spacing-25">
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <label class="col-lg-4 control-label">Title</label>
                                    <div class="col-lg-8">
                                        @Html.TextBoxFor(m => m.DocumentTitle, new { @class = "form-control", @placeholder = "Title" })
                                        @Html.ValidationMessageFor(m => m.DocumentTitle, string.Empty, new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="col-lg-4 control-label">Description</label>
                                    <div class="col-lg-8">
                                        @Html.TextBoxFor(m => m.DocumentDescription, new { @class = "form-control", @placeholder = "Description" })
                                        @Html.ValidationMessageFor(m => m.DocumentDescription, string.Empty, new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-lg-4 control-label">File Upload</label>
                                    <div class="col-lg-8">
                                        @Html.TextBoxFor(m => m.TemplateFile, new { type = "file", @placeholder = "File Upoad", @accept = ".doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" })
                                        @Html.ValidationMessageFor(m => m.TemplateFile, string.Empty, new { @class = "text-danger" })
                                        @*<input class="form-control" placeholder="File Upoad" type="file">*@
                                        <span>
                                            <a href="@Url.Content("~/TemplateFiles/"+Model.TemplateName)" target="_blank">
                                                @Model.TemplateName
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <label class="col-lg-4 control-label">Document Type</label>
                                    <div class="col-lg-8">
                                        @Html.TextBoxFor(m => m.DocumentType, new { @class = "form-control", @placeholder = "Document Type" })
                                        @Html.ValidationMessageFor(m => m.DocumentType, string.Empty, new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-lg-4 control-label">Cost</label>
                                    <div class="col-lg-8">
                                        @Html.TextBoxFor(m => m.Cost, "{0:0.00}", new { @class = "form-control", @placeholder = "Cost", @maxlength = 10 })
                                        @Html.ValidationMessageFor(m => m.Cost, string.Empty, new { @class = "text-danger" })
                                    </div>
                                </div>
                               
                            </div>
                        </div>

                        <hr class="bottom-spacing-25">
                        <div class="row">
                            <div class="col-md-12">
                                @if (Model.associatedTemplate != null)
                                {
                                    @Html.Partial("_associatedDoc", Model.associatedTemplate);
                                }

                            </div>
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="col-md-2">
                    <input type="submit" class="btn btn-default" value="Save Changes" id="btnSubmit" />
                </div>
                <div class="class=" col-md-2"">
                    <button type="button" value="Cancel" class="btn btn-cancel" id="btncancel" onclick="location.href='@Url.Action("Templates","DocumentManagement")'">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/chosen.jquery.js" type="text/javascript"></script>
<script src="~/Scripts/chosen.order.jquery.js" type="text/javascript"></script>
<script type="text/javascript">
    var config = {
      '.chosen-select'           : {},
      '.chosen-select-deselect'  : {allow_single_deselect:true},
      '.chosen-select-no-single' : {disable_search_threshold:10},
      '.chosen-select-no-results': {no_results_text:'Oops, nothing found!'},
      '.chosen-select-width'     : {width:"95%"}
    }
    for (var selector in config) {
      $(selector).chosen(config[selector]);
    }
</script>
    <script type="text/javascript">
        $(document).ready(function () {
            if ($("#AssociateTemplateIds").val() != null) {
                $("#Mandatory").prop("disabled", false);
                var order=[@Model.OrderIds];
                $('#AssociateTemplateIds').setSelectionOrder(order);
            }

           

            $("#DocumentCategoryId").change(function ()
            {
                associateDocument();
            if ($("#DocumentCategoryId").val() != "") {
                var options = {};
                options.url = "@Url.Content("~/DocumentManagement/GetSubCategoryById")";
                options.type = "POST";
                options.data = JSON.stringify({ id: $("#DocumentCategoryId").val(),TemplateId:@Model.TemplateId });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (result) {

                    $("#DocumentSubCategoryId").empty();
                    for (var i = 0; i < result.DocumentSubCategory.length; i++) {
                        if (i == 0)
                        {
                            $("#DocumentSubCategoryId").append("<option value=''>- Please Select -</option>");
                        }
                        $("#DocumentSubCategoryId").append("<option value=" + result.DocumentSubCategory[i].ID + ">" + result.DocumentSubCategory[i].Name + "</option>");
                    }
                    if (result.DocumentSubCategory.length == 0) { $("#DocumentSubCategoryId").prop("disabled", true); } else { $("#DocumentSubCategoryId").prop("disabled", false); }

                   // alert(result.TemplateList.length);
                    for (var j = 0; j < result.TemplateList.length; j++) {
                        if (j == 0) {
                            $("#AssociateTemplateIds").empty();
                            $("#AssociateTemplateIds").append("<option value=''>- Please Select -</option>");
                            $("#AssociateTemplateIds").prop("disabled", false);
                        }
                        $("#AssociateTemplateIds").append("<option value=" + result.TemplateList[j].ID + ">" + result.TemplateList[j].Name + "</option>");
                    }
                    if (result.TemplateList.length == 0) {
                        $("#AssociateTemplateIds").empty();
                        $("#AssociateTemplateIds").prop("disabled", true);
                        $("#AssociateTemplateIds").append("<option value=''>- Please Select -</option>");
                    } else { $("#AssociateTemplateIds").prop("disabled", false); }

                };
                options.error = function () { alert("Error retrieving Document Sub Category!"); };
                $.ajax(options);
            }
            else {
                $("#DocumentSubCategoryId").empty();
                $("#DocumentSubCategoryId").prop("disabled", true);
            }
        });

        $("#DocumentSubCategoryId").change(function () {
            if ($("#DocumentSubCategoryId").val() != "") {
                var options = {};
                options.url = "@Url.Content("~/DocumentManagement/GetSubSubCategoryById")";
                options.type = "POST";
                options.data = JSON.stringify({ id: $("#DocumentSubCategoryId").val() });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (DocumentSubSubCategory) {
                   // alert(DocumentSubSubCategory.length);
                    $("#DocumentSubSubCategoryId").empty();
                    if (DocumentSubSubCategory.length > 0)
                    {
                        for (var i = 0; i < DocumentSubSubCategory.length; i++) {
                            if (i == 0) {
                                $("#DocumentSubSubCategoryId").append("<option value=''>- Please Select -</option>");
                            }
                            $("#DocumentSubSubCategoryId").append("<option value=" + DocumentSubSubCategory[i].ID + ">" + DocumentSubSubCategory[i].Name + "</option>");
                        }
                        $("#DocumentSubSubCategoryId").prop("disabled", false);
                    } else {
                        $("#DocumentSubSubCategoryId").empty();
                        $("#DocumentSubSubCategoryId").prop("disabled", true);
                    }

                };
                options.error = function () { alert("Error retrieving Document Sub Category!"); };
                $.ajax(options);
            }
            else {
                $("#DocumentSubSubCategoryId").empty();
                $("#DocumentSubSubCategoryId").prop("disabled", true);
            }
        });

        $("#AssociateTemplateIds").click(function () {
            // alert($("#AssociateTemplateIds").val());
            if ($("#AssociateTemplateIds").val() != null) {
                $("#Mandatory").prop("disabled", false);
            } else {
                $("#Mandatory").prop("disabled", true);
            }
        });
    });
       
        $(".chosen-select").chosen().change(function () {
            if ($("#AssociateTemplateIds").val() != null) {
                $("#Mandatory").prop("disabled", false);
            } else {
                $("#Mandatory").prop("disabled", true);
            }
            $('#OrderIds').empty();
            $('.chosen-select').trigger('chosen:updated');
            var selection = $('#AssociateTemplateIds').getSelectionOrder();
            $('#OrderIds').val(selection);
          

        });


        function isNumber(evt) {
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            return true;
        }

        $("#DepartmentID").change(function () {
           
            associateDocument();
        });

        function SetData(data) {
          
            $("#divPartialView").html(data); // HTML DOM replace
        }
        function associateDocument()
        {
            $.ajax({
                url: '@Url.Action("GetPartialview", "DocumentManagement")',
                data: {
                    id: $("#DocumentCategoryId").val(), TemplateId: $('#TemplateId').val(), /* add other additional parameters */
                   
                    DepartmentID: $("#DepartmentID").val()
                },
                cache: false,
                type: "POST",
                dataType: "html",
                success: function (data, textStatus, XMLHttpRequest) {
                    SetData(data);
                }
            });
        }
</script>

}
