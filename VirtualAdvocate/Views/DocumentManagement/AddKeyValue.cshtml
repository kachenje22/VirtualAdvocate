@model VirtualAdvocate.Models.TemplateKeywordModel
@{
    ViewBag.MenuActive = "Templatekey";
    //ViewBag.Title = "VIRTUAL ADVOCATE";
    Layout = "~/Views/Shared/_Layoutmain.cshtml";
}

<h2>ADD TEMPLATE KEY</h2>

@using (Html.BeginForm("AddKeyValue", "DocumentManagement", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-lg-12">
            <div class="well bs-component">
                <fieldset>
                    <legend>Document Key</legend>

                    <div class="row">
                        <div class="col-lg-12">

                            <div class="form-group">
                                @Html.Label("Key Category", htmlAttributes: new { @class = "col-lg-3 control-label", @maxlength = 10 })
                                <div>
                                    @Html.DropDownListFor(model => model.TemplateKeyCategory, new SelectList(Model.getTemplateKeyCategory, "ID", "Name"), "-Select-", new { @class = "form-control col-lg-6" })
                                    @Html.ValidationMessageFor(model => model.TemplateKeyCategory, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Template Key Value", htmlAttributes: new { @class = "col-lg-3 control-label", @maxlength = 10 })
                                <div>
                                    @Html.EditorFor(model => model.TemplateKeyValue, new { htmlAttributes = new { @class = "form-control col-lg-6", @placeholder = "Template Key" } })
                                    @Html.ValidationMessageFor(model => model.TemplateKeyValue, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-lg-3">
                                    @Html.CheckBoxFor(model => model.MultipleKeys, false) MultiKeys
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Template Key Label", htmlAttributes: new { @class = "col-lg-3 control-label" })
                                <div>
                                    @Html.EditorFor(model => model.TemplateKeyLabels, new { htmlAttributes = new { @class = "form-control col-lg-6", @placeholder = "Template Key Label" } })
                                    @Html.ValidationMessageFor(model => model.TemplateKeyLabels, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-lg-3">
                                    @Html.CheckBoxFor(model => model.TextArea, false) Text Area
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Clone From", htmlAttributes: new { @class = "col-lg-3 control-label", @maxlength = 10 })
                                <div>
                                    @Html.DropDownListFor(model => model.ClonedFrom, new SelectList(Model.getTemplateKeys, "ID", "Name"), "-Select-", new { @class = "form-control col-lg-6" })

                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Template Key Description", htmlAttributes: new { @class = "col-lg-3 control-label" })
                                <div>
                                    @Html.EditorFor(model => model.TemplateKeyDescription, new { htmlAttributes = new { @class = "form-control col-lg-6", @placeholder = "Description" } })
                                </div>
                                <div class="col-lg-3">
                                    @Html.CheckBoxFor(model => model.BigTextArea, false)Big Text Area
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-lg-3">

                                </div>
                                <div>
                                    @Html.CheckBoxFor(model => model.SecurityCheck, false) Security Alert
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Will this key be the asset name ?", htmlAttributes: new { @class = "col-lg-3 control-label" })
                                <div>
                                    @Html.EditorFor(model => model.IsAssetName, new { htmlAttributes = new { @style = "margin:9px 0 0 0" } })
                                    @Html.ValidationMessageFor(model => model.IsAssetName, "", new { @class = "text-danger", @id = "valIsAssetName" })
                                </div>
                            </div>

                        </div>

                    </div>
                </fieldset>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="col-md-2">
                    <input type="submit" id="btnSubmit" class="btn btn-default" value="Submit" />
                </div>
                <div class="">
                    <button type="button" value="Cancel" class="btn btn-cancel" id="btncancel" onclick="location.href='@Url.Action("KeywordIndex","DocumentManagement")'">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Scripts/jquery-1.11.3.min.js"></script>
<script>
    $('#btnSubmit').click(function (e) {

        if ($('#IsAssetName').is(':checked') == true) {

            $.ajax({
                url: '/DocumentManagement/CheckKeyCategory/' + $('#TemplateKeyCategory').val(),
                type: 'GET',
                async: false,
                success: function (result) {
                    if (result == 300) {
                        e.preventDefault();
                        $('#valIsAssetName').text('Other key is already been associated with this key category.');
                        
                    }
                },
                error: function (a, b, c) {
                    console.log(b);
                }
            });
        }
        
    });
</script>