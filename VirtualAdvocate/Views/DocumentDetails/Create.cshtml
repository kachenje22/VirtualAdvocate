@model VirtualAdvocate.Models.DocumentDetailsViewModel
@{
    ViewBag.MenuActive = "Tracker";
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layoutmain.cshtml";
}



<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="~/Scripts/jquery-1.11.3.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


<h2>Add Document</h2>

@using (Html.BeginForm("Create", "DocumentDetails", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12">
            <div class="well bs-component">
                <fieldset>

                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">
                                @Html.ValidationMessage("PageError", "", new { @class = "text-danger col-md-offset-1" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="select" class="col-lg-2 control-label">Customer Name</label>

                              
                                <div class="col-lg-4">
                                    @Html.DropDownList("CustomerId", null, "Select Customer", new { @class = "form-control" })

                                </div>

                                <label for="select" class="col-lg-2 control-label">Document</label>
                                <div class="col-lg-4">

                                    @Html.DropDownList("DocumentId", null, "Select Document", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DocumentId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="select" class="col-lg-2 control-label">Vendor</label>
                                <div class="col-lg-4">
                                    @Html.EditorFor(model => model.Vendor, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @*@Html.ValidationMessageFor(model => model.DocumentId, "", new { @class = "text-danger" })*@
                                </div>

                                <label for="select" class="col-lg-2 control-label">Purpose</label>
                                <div class="col-lg-4">
                                    @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @*@Html.ValidationMessageFor(model => model.DocumentId, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="select" class="col-lg-2 control-label">Date Handed</label>
                                <div class="col-lg-4" style="margin: 7px 0 0 0;">

                                    @Html.EditorFor(model => model.DateHanded, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.DateHanded, "", new { @class = "text-danger" })
                                </div>
                                <label for="select" class="col-lg-2 control-label">Date to be submitted</label>
                                <div class="col-lg-4">
                                    @Html.EditorFor(model => model.DateToBeSubmitted, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.DateToBeSubmitted, "", new { @class = "text-danger" })
                                </div>



                            </div>
                        </div>

                    </div>
                </fieldset>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="col-md-2">
                    <input type="submit" value="Add" class="btn btn-default" id="btnCreateSubmit" />
                </div>
                <div class="">
                    <button type="button" value="Cancel" class="btn btn-cancel" id="btncancel" onclick="location.href='/DocumentDetails'">Cancel</button>
                </div>
            </div>
        </div>
    </div>

}


<script>
    var $j = jQuery.noConflict();
    $j('#DateHanded').datepicker({
        dateFormat: 'dd-mm-yy',
        changeMonth: true,
        changeYear: true,
        onSelect: function (date, e) {

            //console.log(e);

            var selectedDate = new Date(date);
            var msecsInADay = 86400000;
            var endDate = new Date(selectedDate.getTime() + msecsInADay);

            //Set Minimum Date of EndDatePicker After Selected Date of StartDatePicker
            $j("#DateToBeSubmitted").datepicker("option", "minDate", date);
            //$("#DateOfExpiry").datepicker("option", "maxDate", '+2y');

        }
    });

    $j("#DateToBeSubmitted").datepicker({
        dateFormat: 'dd-mm-yy',
        changeMonth: true,
        changeYear: true
    });

    $j('#CustomerId').change(function () {
        var id = $j('#CustomerId').val();

        if (id != '') {
            $j.ajax({
                url: '/DocumentDetails/GetDocumentsByCustomer?id=' + id,
                contentType: 'json',
                type: 'GET',
                success: function (result) {
                    console.log(result);
                    $j('#DocumentId option[value!=""]').remove();
                    //$('#DocumentId').append('<option value="">Select Document</option>');
                    if (result != 'Error') {
                        if (result.length > 0) {
                            for (i = 0; i < result.length; i++) {
                                $j('#DocumentId').append('<option value="' + result[i].RowId + '">' + result[i].FilledTemplateName + '</option>');
                            }
                        }
                    }
                    else {
                        alert('Error occurred');
                    }
                },
                error: function () {
                    console.log('error');
                }
            })
        }
        else {
            $j('#DocumentId option[value!=""]').remove();
        }
    });

    //$("#DateHanded").datepicker({
    //    dateFormat: 'dd-mm-yy',
    //    minDate: 0
    //});

    //$("#DateToBeSubmitted").datepicker({
    //    dateFormat: 'dd-mm-yy',
    //    minDate: 0
    //});

    //$('#CustomerId').change(function () {
    //    var id = $('#CustomerId').val();

    //    if (id != '') {
    //        $.ajax({
    //            url: '/DocumentDetails/GetDocumentsByCustomer?id=' + id,
    //            contentType: 'json',
    //            type: 'GET',
    //            success: function (result) {
    //                console.log(result);
    //                $('#DocumentId option[value!=""]').remove();
    //                //$('#DocumentId').append('<option value="">Select Document</option>');
    //                if (result != 'Error') {
    //                    if (result.length > 0) {
    //                        for (i = 0; i < result.length; i++) {
    //                            $('#DocumentId').append('<option value="' + result[i].RowId + '">' + result[i].FilledTemplateName + '</option>');
    //                        }
    //                    }
    //                }
    //                else {
    //                    alert('Error occurred');
    //                }
    //            },
    //            error: function () {
    //                console.log('error');
    //            }
    //        })
    //    }
    //    else {
    //        $('#DocumentId option[value!=""]').remove();
    //    }
    //})
</script>