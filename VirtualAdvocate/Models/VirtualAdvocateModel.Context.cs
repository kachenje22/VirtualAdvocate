//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VirtualAdvocate.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VirtualAdvocateEntities : DbContext
    {
        public VirtualAdvocateEntities()
            : base("name=VirtualAdvocateEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountService> AccountServices { get; set; }
        public virtual DbSet<ApplicationConfiguration> ApplicationConfigurations { get; set; }
        public virtual DbSet<AssociatedKeyGroup> AssociatedKeyGroups { get; set; }
        public virtual DbSet<AssociateTemplateDetail> AssociateTemplateDetails { get; set; }
        public virtual DbSet<BulkTemplateLog> BulkTemplateLogs { get; set; }
        public virtual DbSet<BulkTemplateValue> BulkTemplateValues { get; set; }
        public virtual DbSet<ClientWiseCustomerTemplate> ClientWiseCustomerTemplates { get; set; }
        public virtual DbSet<Clouse> Clice { get; set; }
        public virtual DbSet<ClouseandCategoryMaping> ClouseandCategoryMapings { get; set; }
        public virtual DbSet<ClouseLog> ClouseLogs { get; set; }
        public virtual DbSet<CoverLetter> CoverLetters { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
        public virtual DbSet<CustomerTemplateDetail> CustomerTemplateDetails { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentLog> DepartmentLogs { get; set; }
        public virtual DbSet<DocumentCategory> DocumentCategories { get; set; }
        public virtual DbSet<DocumentSubCategory> DocumentSubCategories { get; set; }
        public virtual DbSet<DocumentSubSubCategory> DocumentSubSubCategories { get; set; }
        public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }
        public virtual DbSet<DueDiligenceCost> DueDiligenceCosts { get; set; }
        public virtual DbSet<DueDiligenceEnquiry> DueDiligenceEnquiries { get; set; }
        public virtual DbSet<DueDiligenceEnquiryType> DueDiligenceEnquiryTypes { get; set; }
        public virtual DbSet<FilledTemplateDetail> FilledTemplateDetails { get; set; }
        public virtual DbSet<Inquiry> Inquiries { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<LogAccountService> LogAccountServices { get; set; }
        public virtual DbSet<LogDocumentCategory> LogDocumentCategories { get; set; }
        public virtual DbSet<LogDocumentSubCategory> LogDocumentSubCategories { get; set; }
        public virtual DbSet<LogDueDiligenceUser> LogDueDiligenceUsers { get; set; }
        public virtual DbSet<LogDueUserPaymentType> LogDueUserPaymentTypes { get; set; }
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<LogKeywordCategory> LogKeywordCategories { get; set; }
        public virtual DbSet<LogOrganizationDetail> LogOrganizationDetails { get; set; }
        public virtual DbSet<LogRegistration> LogRegistrations { get; set; }
        public virtual DbSet<LogSubSubCategory> LogSubSubCategories { get; set; }
        public virtual DbSet<LogTemplateUpload> LogTemplateUploads { get; set; }
        public virtual DbSet<LogUserPaymentType> LogUserPaymentTypes { get; set; }
        public virtual DbSet<LogUserService> LogUserServices { get; set; }
        public virtual DbSet<OrganizationDetail> OrganizationDetails { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<PasswordRequest> PasswordRequests { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<ReportType> ReportTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SelectedAccountService> SelectedAccountServices { get; set; }
        public virtual DbSet<SelectedDepartment> SelectedDepartments { get; set; }
        public virtual DbSet<SelectedPaymentMethod> SelectedPaymentMethods { get; set; }
        public virtual DbSet<SystemConfig> SystemConfigs { get; set; }
        public virtual DbSet<TemplateDynamicFormValue> TemplateDynamicFormValues { get; set; }
        public virtual DbSet<TemplateGroupDetail> TemplateGroupDetails { get; set; }
        public virtual DbSet<TemplateKeysPointer> TemplateKeysPointers { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<UserAccountType> UserAccountTypes { get; set; }
        public virtual DbSet<UserAddressDetail> UserAddressDetails { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<KeyCategory> KeyCategories { get; set; }
        public virtual DbSet<TemplateKeyword> TemplateKeywords { get; set; }
        public virtual DbSet<RecursiveNotificationDetail> RecursiveNotificationDetails { get; set; }
        public virtual DbSet<ProbationDetail> ProbationDetails { get; set; }
        public virtual DbSet<DocumentDetailsStatu> DocumentDetailsStatus { get; set; }
        public virtual DbSet<DocumentStatusChangeRequest> DocumentStatusChangeRequests { get; set; }
        public virtual DbSet<DocumentDetail> DocumentDetails { get; set; }
        public virtual DbSet<Insurance> Insurances { get; set; }
    
        public virtual ObjectResult<InvoiceList_Result> Get_InvoiceList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceList_Result>("Get_InvoiceList");
        }
    
        public virtual ObjectResult<GetorganizationUserList_sp_Result> GetorganizationUserList_sp(Nullable<int> orgId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetorganizationUserList_sp_Result>("GetorganizationUserList_sp", orgIdParameter);
        }
    
        public virtual ObjectResult<GetorganizationUserList_Result> Get_OrgUserList(Nullable<int> orgId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetorganizationUserList_Result>("Get_OrgUserList", orgIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCurrentMonthCount(Nullable<int> orgId, Nullable<int> userId, Nullable<int> departmentId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCurrentMonthCount", orgIdParameter, userIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<GetTotalDocumentCount_sp_Result> GetTotalDocumentCount_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalDocumentCount_sp_Result>("GetTotalDocumentCount_sp");
        }
    
        public virtual ObjectResult<Nullable<int>> GetTotalDocumentCountOrgUser_sp(Nullable<int> orgId, Nullable<int> userId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTotalDocumentCountOrgUser_sp", orgIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GenerateReport_Result> GenerateReport(Nullable<int> roleId, Nullable<int> reportType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> orgId, Nullable<int> userId, Nullable<int> documentTypeId, Nullable<int> documentSubId, Nullable<int> documentSubSubId, Nullable<int> department)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var documentSubIdParameter = documentSubId.HasValue ?
                new ObjectParameter("DocumentSubId", documentSubId) :
                new ObjectParameter("DocumentSubId", typeof(int));
    
            var documentSubSubIdParameter = documentSubSubId.HasValue ?
                new ObjectParameter("DocumentSubSubId", documentSubSubId) :
                new ObjectParameter("DocumentSubSubId", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateReport_Result>("GenerateReport", roleIdParameter, reportTypeParameter, fromDateParameter, toDateParameter, orgIdParameter, userIdParameter, documentTypeIdParameter, documentSubIdParameter, documentSubSubIdParameter, departmentParameter);
        }
    
        public virtual ObjectResult<GetTotalDocumentCount_Result> getTotalCountByOrganization()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalDocumentCount_Result>("getTotalCountByOrganization");
        }
    
        public virtual ObjectResult<GetTotalDocumentCountByOrganization_sp_Result> GetTotalDocumentCountByOrganization_sp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalDocumentCountByOrganization_sp_Result>("GetTotalDocumentCountByOrganization_sp");
        }
    
        public virtual ObjectResult<GetOrganizationCountByCategoy_Result> GetOrganizationCountByCategoy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrganizationCountByCategoy_Result>("GetOrganizationCountByCategoy");
        }
    
        public virtual ObjectResult<GetCategoriesOrgUsersCurrnetMonthTotalCount_Result> GetCategoriesOrgUsersCurrnetMonthTotalCount(Nullable<int> categoryType, Nullable<int> orgId, Nullable<int> userId)
        {
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoriesOrgUsersCurrnetMonthTotalCount_Result>("GetCategoriesOrgUsersCurrnetMonthTotalCount", categoryTypeParameter, orgIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetCategoriesOrgUsersTotalCount_Result> GetCategoriesOrgUsersTotalCount(Nullable<int> categoryType, Nullable<int> orgId, Nullable<int> userId, Nullable<int> departmentID)
        {
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoriesOrgUsersTotalCount_Result>("GetCategoriesOrgUsersTotalCount", categoryTypeParameter, orgIdParameter, userIdParameter, departmentIDParameter);
        }
    
        public virtual ObjectResult<GetCategoriesTotalCount_Result> GetCategoriesTotalCount(Nullable<int> categoryType)
        {
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoriesTotalCount_Result>("GetCategoriesTotalCount", categoryTypeParameter);
        }
    
        public virtual ObjectResult<InvoiceListAcAdmin_sp_Result> InvoiceListAcAdmin_sp(Nullable<int> orgId, Nullable<int> userId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceListAcAdmin_sp_Result>("InvoiceListAcAdmin_sp", orgIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<getGraphMonthlyCompanyRegister_Result> getGraphMonthlyCompanyRegister()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getGraphMonthlyCompanyRegister_Result>("getGraphMonthlyCompanyRegister");
        }
    
        public virtual ObjectResult<NewEnquiriesDueDiligence_sp_Result> NewEnquiriesDueDiligence_sp(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewEnquiriesDueDiligence_sp_Result>("NewEnquiriesDueDiligence_sp", monthParameter);
        }
    
        public virtual ObjectResult<GraphMonthlyIndividualRegister_Result> getGraphMonthlyIndividualRegister()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GraphMonthlyIndividualRegister_Result>("getGraphMonthlyIndividualRegister");
        }
    
        public virtual ObjectResult<CategoryInvoiceTotalAmount_Result> CategoryInvoiceTotalAmount(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoryInvoiceTotalAmount_Result>("CategoryInvoiceTotalAmount", userIdParameter);
        }
    
        public virtual ObjectResult<DueInvoiceThisMonth_Result> DueInvoiceThisMonth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DueInvoiceThisMonth_Result>("DueInvoiceThisMonth");
        }
    
        public virtual ObjectResult<GraphInvoiceTotalAmount_Result> GraphInvoiceTotalAmount(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GraphInvoiceTotalAmount_Result>("GraphInvoiceTotalAmount", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InvoiceTotalAmount(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InvoiceTotalAmount", userIdParameter);
        }
    
        public virtual ObjectResult<GetCategoriesCurrnetMonthTotalCount_Result> GetCategoriesCurrnetMonthTotalCount(Nullable<int> categoryType)
        {
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoriesCurrnetMonthTotalCount_Result>("GetCategoriesCurrnetMonthTotalCount", categoryTypeParameter);
        }
    
        public virtual ObjectResult<ViewLogCategory_Result> ViewLogCategory(Nullable<int> logId, Nullable<int> iD)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogCategory_Result>("ViewLogCategory", logIdParameter, iDParameter);
        }
    
        public virtual ObjectResult<ViewLogSubCategory_Result> ViewLogSubCategory(Nullable<int> logId, Nullable<int> id)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogSubCategory_Result>("ViewLogSubCategory", logIdParameter, idParameter);
        }
    
        public virtual ObjectResult<ViewLogSubSubCategory_Result> ViewLogSubSubCategory(Nullable<int> logId, Nullable<int> id)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogSubSubCategory_Result>("ViewLogSubSubCategory", logIdParameter, idParameter);
        }
    
        public virtual ObjectResult<ViewLogTemplateUpload_Result> ViewLogTemplateUpload(Nullable<int> logId, Nullable<int> iD)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogTemplateUpload_Result>("ViewLogTemplateUpload", logIdParameter, iDParameter);
        }
    
        public virtual ObjectResult<LogRegistrationList_Result> LogRegistrationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogRegistrationList_Result>("LogRegistrationList");
        }
    
        public virtual ObjectResult<ViewLogRegistration_Result1> ViewLogRegistration(Nullable<int> logId)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogRegistration_Result1>("ViewLogRegistration", logIdParameter);
        }
    
        public virtual ObjectResult<ViewLogDueRegistration_Result> ViewLogDueRegistration(Nullable<int> logId)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogDueRegistration_Result>("ViewLogDueRegistration", logIdParameter);
        }
    
        public virtual ObjectResult<DocumentCategoryByUser_sp_Result1> DocumentCategoryByUser_sp(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentCategoryByUser_sp_Result1>("DocumentCategoryByUser_sp", userIDParameter);
        }
    
        public virtual ObjectResult<GetIndividualUserList_Result> GetIndividualUserList(Nullable<int> userId, Nullable<int> roleID, Nullable<int> department, Nullable<int> orgID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIndividualUserList_Result>("GetIndividualUserList", userIdParameter, roleIDParameter, departmentParameter, orgIDParameter);
        }
    
        public virtual int UpdateAssociateTemplate(Nullable<int> templateId, Nullable<int> associateTemplateId, Nullable<int> ordervalue, Nullable<bool> mandatory)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            var associateTemplateIdParameter = associateTemplateId.HasValue ?
                new ObjectParameter("AssociateTemplateId", associateTemplateId) :
                new ObjectParameter("AssociateTemplateId", typeof(int));
    
            var ordervalueParameter = ordervalue.HasValue ?
                new ObjectParameter("Ordervalue", ordervalue) :
                new ObjectParameter("Ordervalue", typeof(int));
    
            var mandatoryParameter = mandatory.HasValue ?
                new ObjectParameter("Mandatory", mandatory) :
                new ObjectParameter("Mandatory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAssociateTemplate", templateIdParameter, associateTemplateIdParameter, ordervalueParameter, mandatoryParameter);
        }
    
        public virtual ObjectResult<ViewLogService_Result> ViewLogService(Nullable<int> logId, Nullable<int> serviceID)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLogService_Result>("ViewLogService", logIdParameter, serviceIDParameter);
        }
    
        public virtual ObjectResult<GetAssociatedDocuments_Result> GetAssociatedDocuments(Nullable<int> categoryId, Nullable<int> templateId, Nullable<int> departmentId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssociatedDocuments_Result>("GetAssociatedDocuments", categoryIdParameter, templateIdParameter, departmentIdParameter);
        }
    
        public virtual int GetCustomerTemplates(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerTemplates", clientIDParameter);
        }
    
        public virtual ObjectResult<LogDueRegistrationList_Result> LogDueRegistrationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogDueRegistrationList_Result>("LogDueRegistrationList");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("VirtualAdvocateEntities", "SplitString")]
        public virtual IQueryable<string> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[VirtualAdvocateEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<GetReportData_Result> GetReportData(string reportType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> user, Nullable<int> category, Nullable<int> subCategory, Nullable<int> subsubCategory, Nullable<int> orgID, Nullable<int> department, Nullable<int> role)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var subCategoryParameter = subCategory.HasValue ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(int));
    
            var subsubCategoryParameter = subsubCategory.HasValue ?
                new ObjectParameter("SubsubCategory", subsubCategory) :
                new ObjectParameter("SubsubCategory", typeof(int));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportData_Result>("GetReportData", reportTypeParameter, fromDateParameter, todateParameter, userParameter, categoryParameter, subCategoryParameter, subsubCategoryParameter, orgIDParameter, departmentParameter, roleParameter);
        }
    
        public virtual ObjectResult<GetMaxlengthOfUserInputs_Result> GetMaxlengthOfUserInputs(Nullable<int> customerID, Nullable<int> templateId)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMaxlengthOfUserInputs_Result>("GetMaxlengthOfUserInputs", customerIDParameter, templateIdParameter);
        }
    
        public virtual ObjectResult<GetAssociatedKeysGroup_Result> GetAssociatedKeysGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssociatedKeysGroup_Result>("GetAssociatedKeysGroup");
        }
    
        public virtual ObjectResult<GetAssociatedGroupKeys_Result> GetAssociatedGroupKeys(Nullable<int> templateID, string groupName)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("groupName", groupName) :
                new ObjectParameter("groupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssociatedGroupKeys_Result>("GetAssociatedGroupKeys", templateIDParameter, groupNameParameter);
        }
    
        public virtual ObjectResult<GetReportDetails_Result> GetReportDetails(string reportType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> user, Nullable<int> category, Nullable<int> subCategory, Nullable<int> subsubCategory, Nullable<int> orgID, Nullable<int> department, Nullable<int> role)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var subCategoryParameter = subCategory.HasValue ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(int));
    
            var subsubCategoryParameter = subsubCategory.HasValue ?
                new ObjectParameter("SubsubCategory", subsubCategory) :
                new ObjectParameter("SubsubCategory", typeof(int));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportDetails_Result>("GetReportDetails", reportTypeParameter, fromDateParameter, todateParameter, userParameter, categoryParameter, subCategoryParameter, subsubCategoryParameter, orgIDParameter, departmentParameter, roleParameter);
        }
    }
}
